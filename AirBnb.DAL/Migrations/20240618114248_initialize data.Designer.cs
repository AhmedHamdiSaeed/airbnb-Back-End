// <auto-generated />
using System;
using AirBnb.DAL.Data.context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirBnb.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240618114248_initialize data")]
    partial class initializedata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("propertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("propertyId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.AppointmentsAvailable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("AppointmentsAvailable");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countires");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Beds")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("CheckIn")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("CheckOut")
                        .HasColumnType("time");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayedImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBedrooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuest")
                        .HasColumnType("int");

                    b.Property<bool>("Pets")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TakePhotos")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingId = 1,
                            Comment = "Good Comment",
                            Rating = 5,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 2,
                            BookingId = 2,
                            Comment = "Nice place",
                            Rating = 4,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 3,
                            BookingId = 3,
                            Comment = "Average experience",
                            Rating = 3,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 4,
                            BookingId = 4,
                            Comment = "Not as expected",
                            Rating = 2,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 5,
                            BookingId = 5,
                            Comment = "Excellent service",
                            Rating = 5,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 6,
                            BookingId = 6,
                            Comment = "Good value for money",
                            Rating = 4,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 7,
                            BookingId = 7,
                            Comment = "Decent stay",
                            Rating = 3,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 8,
                            BookingId = 8,
                            Comment = "Terrible experience",
                            Rating = 1,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 9,
                            BookingId = 9,
                            Comment = "Highly recommend",
                            Rating = 5,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 10,
                            BookingId = 10,
                            Comment = "Very comfortable",
                            Rating = 4,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 11,
                            BookingId = 11,
                            Comment = "Could be better",
                            Rating = 2,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 12,
                            BookingId = 12,
                            Comment = "Loved the place",
                            Rating = 5,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 13,
                            BookingId = 13,
                            Comment = "It was okay",
                            Rating = 3,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 14,
                            BookingId = 14,
                            Comment = "Pretty good",
                            Rating = 4,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 15,
                            BookingId = 15,
                            Comment = "Needs improvement",
                            Rating = 2,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 16,
                            BookingId = 16,
                            Comment = "Fantastic stay",
                            Rating = 5,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 17,
                            BookingId = 17,
                            Comment = "Very disappointing",
                            Rating = 1,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 18,
                            BookingId = 18,
                            Comment = "Good location",
                            Rating = 4,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 19,
                            BookingId = 19,
                            Comment = "Not bad",
                            Rating = 3,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        },
                        new
                        {
                            Id = 20,
                            BookingId = 20,
                            Comment = "Amazing experience",
                            Rating = 5,
                            UserId = "53f9998c-e5c9-4bd5-8db6-eefc68f7fb4f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Amenity", b =>
                {
                    b.HasOne("AirBnb.DAL.Data.Model.Property", null)
                        .WithMany("Amenity")
                        .HasForeignKey("propertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.AppointmentsAvailable", b =>
                {
                    b.HasOne("AirBnb.DAL.Data.Model.Property", "Property")
                        .WithMany("AppointmentsAvailable")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Booking", b =>
                {
                    b.HasOne("AirBnb.DAL.Data.Model.Property", "Property")
                        .WithMany("PropertyBokking")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirBnb.DAL.Data.Model.AppUser", "User")
                        .WithMany("UserBooking")
                        .HasForeignKey("UserId");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.City", b =>
                {
                    b.HasOne("AirBnb.DAL.Data.Model.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Property", b =>
                {
                    b.HasOne("AirBnb.DAL.Data.Model.Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirBnb.DAL.Data.Model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirBnb.DAL.Data.Model.AppUser", "User")
                        .WithMany("UserProperties")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.PropertyImage", b =>
                {
                    b.HasOne("AirBnb.DAL.Data.Model.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Review", b =>
                {
                    b.HasOne("AirBnb.DAL.Data.Model.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirBnb.DAL.Data.Model.AppUser", "User")
                        .WithMany("UserReviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AirBnb.DAL.Data.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AirBnb.DAL.Data.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirBnb.DAL.Data.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AirBnb.DAL.Data.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.AppUser", b =>
                {
                    b.Navigation("UserBooking");

                    b.Navigation("UserProperties");

                    b.Navigation("UserReviews");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Category", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("AirBnb.DAL.Data.Model.Property", b =>
                {
                    b.Navigation("Amenity");

                    b.Navigation("AppointmentsAvailable");

                    b.Navigation("PropertyBokking");

                    b.Navigation("PropertyImages");
                });
#pragma warning restore 612, 618
        }
    }
}
